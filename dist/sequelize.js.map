{"version":3,"sources":["../src/sequelize.js"],"names":["promise","connect","fn","Promise","resolve","reject","Model","db","fields","table","types","array","ARRAY","TEXT","boolean","BOOLEAN","number","FLOAT","string","STRING","define","Object","keys","reduce","previous","field","current","type","allowNull","required","username","database","password","port","dialect","host","pool","storage","authenticate","then","console","log","catch","error","err","Hello","firstName","lastName","SequelizeQuery","params","Array","isArray","args","findManyById","id","findById","databases","models","json","sequelize","TABLE","schema","sql","findAll","attributes","response","map","item","dataValues","data","query","obj","findOne","where","SequelizeMutation","create","destroy","update","bulkCreate"],"mappings":"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","file":"sequelize.js","sourcesContent":["import Sequelize from 'sequelize';\nimport autobind from 'class-autobind';\nexport function promise (fn) {\n  return new Promise((resolve, reject) => fn(resolve, reject));\n}\n\nfunction Model ({ db, fields, table }) {\n  const types = {\n    array: Sequelize.ARRAY(Sequelize.TEXT),\n    boolean: Sequelize.BOOLEAN,\n    number: Sequelize.FLOAT,\n    string: Sequelize.STRING\n  };\n\n  const Model = db.define(\n    table,\n    Object.keys(fields).reduce((previous, field) => {\n      const current = fields[field];\n\n      return {\n        ...previous,\n        [field]: {\n          type: types[current.type],\n          allowNull: !current.required\n        }\n      };\n    })\n  );\n\n  return Promise.resolve(Model);\n}\n\nexport function connect ({\n  username,\n  database,\n  password,\n  port,\n  dialect,\n  host,\n  pool,\n  storage\n}) {\n  const db = new Sequelize(database, username, password, {\n    host,\n    dialect,\n    pool,\n    storage\n  });\n\n  db\n    .authenticate()\n    .then(() => {\n      console.log('Connection has been established successfully.');\n    })\n    .catch(err => {\n      console.error('Unable to connect to the database:', err);\n    });\n\n  const Hello = db.define('hello', {\n    firstName: {\n      type: Sequelize.STRING\n    },\n    lastName: {\n      type: Sequelize.STRING\n    }\n  });\n\n  // Hello.sync({ force: true }).then(() => {\n  //   return Hello.bulkCreate([\n  //     {\n  //       id: '1',\n  //       firstName: 'Bessie',\n  //       lastName: 'Cummings'\n  //     },\n  //     {\n  //       id: '2',\n  //       firstName: 'Gina',\n  //       lastName: 'Altenwerth'\n  //     },\n  //     {\n  //       id: '3',\n  //       firstName: 'Marcia',\n  //       lastName: 'Lueilwitz'\n  //     },\n  //     {\n  //       id: '4',\n  //       firstName: 'Jeffrey',\n  //       lastName: 'Kuvalis'\n  //     },\n  //     {\n  //       id: '5',\n  //       firstName: 'Green',\n  //       lastName: 'Heaney'\n  //     }\n  //   ]);\n  // });\n\n  return db;\n}\n\nexport class SequelizeQuery {\n  constructor () {\n    autobind(this);\n  }\n\n  resolve (params) {\n    return Array.isArray(params.args)\n      ? this.findManyById({ ...params, args: { id: params.args } })\n      : this.findById(params);\n  }\n\n  findAll ({ args, databases, models, json }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields,\n        table: TABLE\n      })\n        .then(sql =>\n          sql.findAll({\n            attributes: Object.keys(fields)\n          })\n        )\n        .then(response => response.map(item => item.dataValues))\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  findById ({ query, args, databases, models, json }) {\n    const db = databases.sequelize;\n    let obj = args || query;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n    console.log(obj.id);\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields,\n        table: TABLE\n      })\n        .then(sql =>\n          sql.findOne({\n            attributes: Object.keys(fields),\n            where: { id: obj.id }\n          })\n        )\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  findManyById ({ query, args, databases, models, json }) {\n    const db = databases.sequelize;\n    let obj = args || query;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields,\n        table: TABLE\n      })\n        .then(sql =>\n          sql.findAll({\n            attributes: Object.keys(fields),\n            where: { id: obj.id }\n          })\n        )\n        .then(response => response.map(item => item.dataValues))\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n}\n\nexport class SequelizeMutation {\n  constructor () {\n    autobind(this);\n  }\n\n  create ({ args, databases, models, json }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n\n    return promise((resolve, reject) => {\n      Model({\n        db, \n        fields,\n        table: TABLE\n      })\n        .then(sql => sql.create(args))\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  remove ({ args, databases, models, json }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields,\n        table: TABLE\n      })\n        .then(sql =>\n          sql.destroy({\n            where: { id: args.id }\n          })\n        )\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  update ({ args, databases, models, json }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields,\n        table: TABLE\n      })\n        .then(sql =>\n          sql.update(args, {\n            where: { id: args.id }\n          })\n        )\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  createMany ({ args, databases, models, json }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n    const fields = json[TABLE].schema;\n\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields,\n        table: TABLE\n      })\n        .then(sql => sql.bulkCreate(args))\n        .then(response => response.map(item => item.dataValues))\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  // deleteMany\n  // removeMany\n  // updateMany\n}\n"]}
{"version":3,"sources":["../src/sequelize.js"],"names":["promise","connect","fn","Promise","resolve","reject","Model","db","fields","table","types","array","ARRAY","TEXT","boolean","BOOLEAN","number","FLOAT","string","STRING","define","Object","keys","reduce","previous","field","current","type","allowNull","required","username","databases","port","dialect","host","pool","storage","authenticate","then","console","log","catch","error","err","SequelizeQuery","params","Array","isArray","args","findManyById","id","findById","models","json","sequelize","TABLE","schema","sql","findAll","response","map","item","dataValues","data","query","obj","ids","SequelizeMutation"],"mappings":"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","file":"sequelize.js","sourcesContent":["import Sequelize from 'sequelize';\nimport autobind from 'class-autobind';\n\nexport function promise (fn) {\n  return new Promise((resolve, reject) => fn(resolve, reject));\n}\n\nfunction Model ({ db, fields, table }) {\n  const types = {\n    array: Sequelize.ARRAY(Sequelize.TEXT),\n    boolean: Sequelize.BOOLEAN,\n    number: Sequelize.FLOAT,\n    string: Sequelize.STRING\n  };\n\n  const Model = db.define(\n    table,\n    Object.keys(fields).reduce((previous, field) => {\n      const current = fields[field];\n\n      return {\n        ...previous,\n        [field]: {\n          type: types[current.type],\n          allowNull: !current.required\n        }\n      };\n    })\n  );\n\n  return Promise.resolve(Model);\n}\n\nexport function connect ({\n  username,\n  databases,\n  port,\n  dialect,\n  host,\n  pool,\n  storage\n}) {\n  const db = new Sequelize('database', 'username', 'password', {\n    host,\n    dialect,\n    pool,\n    storage\n  });\n\n  db\n    .authenticate()\n    .then(() => {\n      console.log('Connection has been established successfully.');\n    })\n    .catch(err => {\n      console.error('Unable to connect to the database:', err);\n    });\n\n  return db;\n}\n\nexport class SequelizeQuery {\n  constructor () {\n    autobind(this);\n  }\n\n  resolve (params) {\n    return Array.isArray(params.args)\n      ? this.findManyById({ ...params, args: { id: params.args } })\n      : this.findById(params);\n  }\n\n  findAll ({ args, databases, models, json }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      Model({\n        db,\n        fields: json[TABLE].schema,\n        table: TABLE\n      })\n        .then(sql => sql.findAll())\n        .then(response => response.map(item => item.dataValues))\n        .then(data => resolve(data))\n        .catch(error => reject(error));\n    });\n  }\n\n  findById ({ query, args, databases, models }) {\n    const db = databases.sequelize;\n    let obj = args || query;\n    const TABLE = this.table;\n  }\n\n  findManyById ({ query, args, databases, models }) {\n    const db = databases.sequelize;\n    let obj = args || query;\n    const TABLE = this.table;\n    const ids = obj.id.map(id => ({ id }));\n  }\n}\n\nexport class SequelizeMutation {\n  constructor () {\n    autobind(this);\n  }\n\n  create ({ args, databases, models }) {\n    const db = databases.sequelize;\n    const TABLE = this.table;\n  }\n\n  remove ({ args, databases, models }) {\n    const db = databases.sequelize;\n    const id = args.id;\n    const TABLE = this.table;\n  }\n\n  update ({ args, databases, models }) {\n    const db = databases.sequelize;\n    const id = args.id;\n    const TABLE = this.table;\n  }\n\n  // createMany\n  // deleteMany\n  // removeMany\n  // updateMany\n}\n"]}